// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())

  // 關聯到書面問答記錄
  writtenAnswers WrittenAnswer[]
  // 關聯到履歷分析記錄
  resumeAnalyses ResumeAnalysis[]
  // 關聯到錄影面試回答
  videoAnswers   VideoAnswer[]
  // 關聯到教師評論（作為學生）
  studentComments TeacherComment[] @relation("StudentComments")
  // 關聯到教師評論（作為教師）
  teacherComments TeacherComment[] @relation("TeacherAuthored")
  // 關聯到自我介紹分析記錄
  selfIntroAnalyses SelfIntroAnalysis[]
}

model WrittenAnswer {
  id        Int      @id @default(autoincrement())
  userId    Int
  questionId Int
  answer    String   @db.Text
  wordCount Int
  clarityScore Int
  exaggerationScore Int
  issues    String   @db.Text // JSON格式存儲問題列表
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
}

model Question {
  id       Int      @id @default(autoincrement())
  question String   @db.Text
  hint     String   @db.Text
  category String   // 例如: "personal", "academic", "career"
  school   String?  // 學校名稱，例如: "台大", "清大", "交大", "政大", "成大", "中央", "中山", "中興", "台科大", "北科大", "通用"
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())

  // 關聯到錄影面試回答
  videoAnswers VideoAnswer[]
  // 關聯到教師評論
  teacherComments TeacherComment[]
}

model ResumeAnalysis {
  id            Int      @id @default(autoincrement())
  userId        Int
  originalText  String   @db.Text
  scoreResult   String   @db.Text // JSON格式存儲評分結果
  issuesResult  String   @db.Text // JSON格式存儲問題標註
  rewriteResult String   @db.Text // AI重寫建議
  structureResult String  @db.Text // JSON格式存儲結構建議
  overallScore  Int      @default(0)
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
  // 關聯到個性化問題
  personalizedQuestions PersonalizedQuestion[]
}

model PersonalizedQuestion {
  id            Int      @id @default(autoincrement())
  resumeAnalysisId Int
  question      String   @db.Text
  hint          String   @db.Text
  category      String   // personal, academic, technical, career
  reason        String   @db.Text
  createdAt     DateTime @default(now())

  resumeAnalysis ResumeAnalysis @relation(fields: [resumeAnalysisId], references: [id])
}

// 自我介紹分析記錄
model SelfIntroAnalysis {
  id            Int      @id @default(autoincrement())
  userId        Int
  introText     String   @db.Text
  duration      Int      // 練習時長（秒）
  speechRate    Float?   // 語速（音節/秒）
  energy        Float?   // 語音能量（%）
  pitch         Float?   // 音調（Hz）
  confidence    Float?   // 自信度（分）
  continuity    Float?   // 語音連續性（分）
  overallScore  Float?   // 總體評分
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
  // 關聯到個性化問題
  personalizedQuestions SelfIntroPersonalizedQuestion[]
}

// 自我介紹個性化問題
model SelfIntroPersonalizedQuestion {
  id            Int      @id @default(autoincrement())
  selfIntroAnalysisId Int
  question      String   @db.Text
  hint          String   @db.Text
  category      String   // personal, academic, technical, career
  reason        String   @db.Text
  createdAt     DateTime @default(now())

  selfIntroAnalysis SelfIntroAnalysis @relation(fields: [selfIntroAnalysisId], references: [id])
}

// 用於保存錄影面試的答案與分析元資料
model VideoAnswer {
  id           Int      @id @default(autoincrement())
  userId       Int
  questionId   Int?
  questionText String?  @db.Text
  videoPath    String
  durationSec  Int
  speechRate   Int?
  emotionScore Int?
  transcript   String?  @db.Text
  analysisJson String?  @db.Text
  thumbnailPath String?
  sizeBytes    Int
  mimeType     String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  question     Question? @relation(fields: [questionId], references: [id])

  teacherComments TeacherComment[]

  @@index([userId])
  @@index([questionId])
  @@unique([userId, questionId])
}

model TeacherComment {
  id             Int      @id @default(autoincrement())
  studentUserId  Int
  teacherUserId  Int
  targetType     String   // 'video' | 'written'
  videoAnswerId  Int?
  questionId     Int?
  comment        String   @db.Text
  score          Int?
  createdAt      DateTime @default(now())

  student        User     @relation("StudentComments", fields: [studentUserId], references: [id])
  teacher        User     @relation("TeacherAuthored", fields: [teacherUserId], references: [id])
  videoAnswer    VideoAnswer? @relation(fields: [videoAnswerId], references: [id])
  question       Question?    @relation(fields: [questionId], references: [id])

  @@index([studentUserId])
  @@index([teacherUserId])
  @@index([videoAnswerId])
  @@index([questionId])
}